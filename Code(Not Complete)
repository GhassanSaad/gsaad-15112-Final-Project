#Andrew ID: gsaad
#Name: Ghassan Saad
# Final Project
# Course:15-112
# Importing the Libraries
from pygame import *
import sys
from random import randint, choice

# Creating the game screen and window
# Window dimensions (800x600)
GAME_WINDOW= display.set_mode((800, 600))
# The type of font used for the texts and messages
# appear in screen
FONT = 'pdark.ttf'
# Assingning the pictures that represent the shape of the
# invaders, space ship, lasers, and background of the game...etc
Assign_Pic = ['ship','heart', 'BONUS']+['invader'+str(i) for i in range(1,7)]+['destroyblue', 'destroygreen', 'destroypurple',
             'laserinvader', 'laserGREEN']
# Calling the pictures
PICS = {pic: image.load('{}.png'.format(pic)).convert_alpha()
          for pic in Assign_Pic}

# calss for the invaders
# calss for the invaders
class Invader(sprite.Sprite):
    def __init__(self, row, column):
        sprite.Sprite.__init__(self)
        self.row = row
        self.column = column
        self.pictures = []
        self.importpictures()
        self.position = 0
        self.picture = self.pictures[self.position]
        self.rect = self.picture.get_rect()
        self.movingTo = 1
        self.right = 30
        self.left = 30
        self.Steps = 15
        self.Time = 600
        self.timer = time.get_ticks()
# updating the position of the invaders
    def update(self, keys, present, invaders):
        if present - self.timer > self.Time:
            if self.movingTo== 1:
                maximum = self.right + invaders.OneStepRight
            else:
                maximum = self.left + invaders.OneStepLeft

            if self.Steps >= maximum:
                if self.movingTo == 1:
                    self.left = 30 + invaders.OneStepRight
                elif self.movingTo== -1:
                    self.right = 30 + invaders.OneStepLeft
                self.movingTo *= -1
                self.Steps = 0
                self.rect.y += 35
            elif self.movingTo == 1:
                self.rect.x += 10
                self.Steps += 1
            elif self.movingTo == -1:
                self.rect.x -= 10
                self.Steps += 1

            self.position += 1
            if self.position >= len(self.pictures):
                self.position = 0
            self.picture = self.pictures[self.position]

            self.timer += self.Time

        game.window.blit(self.picture, self.rect)
# give each invader a shape by loading pictures
    # related to the invaders
    def importpictures(self):
        pics = {0: ['1', '2'],
                  1: ['3', '4'],
                  2: ['5', '6'],
                  3: ['1', '2'],
                  4: ['3', '4'],
                  }
        pic1, pic2 = (PICS['invader{}'.format(pic)] for pic in
                      pics[self.row])
        self.pictures.append(transform.scale(pic1, (40, 35)))
        self.pictures.append(transform.scale(pic2, (40, 35)))

# gathering the invader team od five rows
# gathering the invader team od five rows
class InvadersTeam(sprite.Group):
    def __init__(self, columns, rows):
        sprite.Group.__init__(self)
        self.invaders = [[0] * columns for _ in range(rows)]
        self.columns = columns
        self.rows = rows
        self.OneStepLeft = 0
        self.OneStepRight = 0
        self._aliveColumns = list(range(columns))
        self._leftAliveColumn = 0
        self._rightAliveColumn = columns - 1
        self._leftKilledColumns = 0
        self._rightKilledColumns = 0
# adding more invaders
    def add(self, *sprites):
        super(sprite.Group, self).add(*sprites)

        for s in sprites:
            self.invaders[s.row][s.column] = s
# checking if the invader column is dead or still unkilled
    def CheckKills(self, column):
        for row in range(self.rows):
            if self.invaders[row][column]:
                return False
        return True

    def randpress(self):
        random_index = randint(0, len(self._aliveColumns) - 1)
        col = self._aliveColumns[random_index]
        for row in range(self.rows, 0, -1):
            invader = self.invaders[row - 1][col]
            if invader:
                return invader
        return None
# A function that check if the invader was shot and dead or not
    def dead(self, invader):
        if not self.invaders[invader.row][invader.column]:
            return  
        self.invaders[invader.row][invader.column] = None
        DeadCheck = self.CheckKills(invader.column)
        if DeadCheck:
            self._aliveColumns.remove(invader.column)

        if invader.column == self._rightAliveColumn:
            while self._rightAliveColumn > 0 and DeadCheck:
                self._rightAliveColumn -= 1
                self._rightKilledColumns += 1
                self.OneStepRight= self._rightKilledColumns * 5
                DeadCheck = self.CheckKills(self._rightAliveColumn)

        elif invader.column == self._leftAliveColumn:
            while self._leftAliveColumn < self.columns and DeadCheck:
                self._leftAliveColumn += 1
                self._leftKilledColumns += 1
                self.OneStepLeft = self._leftKilledColumns * 5
                DeadCheck = self.CheckKills(self._leftAliveColumn)
# class related to the fighter ship
# which will be located
# in the bottom of the screen
class Fighter(sprite.Sprite):
    def __init__(self):
        sprite.Sprite.__init__(self)
        self.picture = PICS['ship']
        # assigning its positions
        #assigning its its speed of moving
        self.rectangle = self.picture.get_rect(topleft=(375, 540))
        self.speed = 5
# update its position every time pressing the left or right
# arrows in the keyboard
    def update(self, keys, *args):
        if keys[K_LEFT] and self.rectangle.x > 10:
            self.rectangle.x -= self.speed
        if keys[K_RIGHT] and self.rectangle.x < 740:
            self.rectangle.x += self.speed
        game.window.blit(self.picture, self.rectangle)


# the defending row that save the ship
class Defend(sprite.Sprite):
    def __init__(self, size, color, row, column):
        sprite.Sprite.__init__(self)
        self.height = size
        self.width = size
        self.color = color
        self.picture= Surface((self.width, self.height))
        self.picture.fill(self.color)
        self.rectangle = self.picture.get_rect()
        self.row = row
        self.column = column

    def update(self, keys, *args):
        game.window.blit(self.picture, self.rectangle)


# the chances or lives before the game is over
# will e represented as hearts (3 chances )
# in the top left of the window

class Chances(sprite.Sprite):
    def __init__(self, x, y):
        sprite.Sprite.__init__(self)
        self.picture = PICS['heart']
        self.picture = transform.scale(self.picture, (23, 23))
        self.rectangle = self.picture.get_rect(topleft=(x, y))
# this function is for updating the lives each time
#the invader laser hit
# the ship
    def update(self, keys, *args):
        game.window.blit(self.picture, self.rectangle)

# Assigning the text font, size , positions and color
class Messages(object):
    def __init__(self, writingshape, size, message, color, x, y):
        self.font = font.Font(writingshape, size)
        self.surface = self.font.render(message, True, color)
        self.rectangle = self.surface.get_rect(topleft=(x, y))

    def draw(self, surface):
        surface.blit(self.surface, self.rectangle)
# Colors (R, G, B) used for the texts and messages written on the screen

WHITE = (255, 255, 255)
GREEN = (78, 255, 87)
YELLOW = (241, 255, 0)
BLUE = (80, 255, 239)
PURPLE = (203, 0, 255)
RED = (237, 28, 36)

class TheGame(object):
    def __init__(self):
        
        mixer.pre_init(44100, -16, 1, 4096)
        init()
        self.caption = display.set_caption('Space Invaders')
        self.window = GAME_WINDOW
        self.background = image.load('game_background.jpg').convert()
        self.startGame = False
        self.mainScreen = True
        self.gameOver = False
        # Initial value for a new game
        self.invaderAnyPos = 65
        # Counter for enemy starting position (increased each new round)
        self.invaderStartLocation = self.invaderAnyPos 
        # Current enemy starting position
        self.invaderLocation = self.invaderStartLocation
# Reseting the game for a new round or new game
    def reset(self, score, lives, newGame=False):
        self.player = Fighter()
        self.playerGroup = sprite.Group(self.player)
        self.reset_lives(lives)
        self.invaderLocation = self.invaderStartLocation 
        self.createinvaders()
        # Only create blockers on a new game, not a new round
        if newGame:
            self.TotalDefenders = sprite.Group(self.createdefenders(0),
                                            self.createdefenders(1),
                                            self.createdefenders(2),
                                            self.createdefenders(3))
        self.keys = key.get_pressed()
        self.clock = time.Clock()
        self.timer = time.get_ticks()
        self.noteTimer = time.get_ticks()
        self.shipTimer = time.get_ticks()
        self.score = score
        self.lives = lives
        self.Fill_Text()
        self.makeNewShip = False
        self.shipAlive = True
# make the defening blockers
    def createdefenders(self, number):
        DefenderTeam = sprite.Group()
        for row in range(4):
            for column in range(9):
                defender = Defend(10, RED, row, column)
                defender.rectangle.x = 50 + (200 * number) + (column * defender.width)
                defender.rectangle.y = 450 + (row * defender.height)
                DefenderTeam.add(defender)
        return DefenderTeam
#Reset the life spirits each game
    def relive(self):
        self.chance1 = Chances(715, 3)
        self.chance2 = Chances(742, 3)
        self.chance3 = Chances(769, 3)

        if self.lives == 3:
            self.LifePackage= sprite.Group(self.chance1, self.chance2, self.chance3)
        elif self.lives == 2:
            self.LifePackage = sprite.Group(self.chance1, self.chance2)
        elif self.lives == 1:
            self.LifePackage= sprite.Group(self.chance1)

    def reset_lives(self, lives):
        self.lives = lives
        self.relive()
# the texts that will apper in the screen

    def Fill_Text(self):
        self.titleText = Messages(FONT, 50, 'Space Invaders', WHITE, 164, 155)
        self.titleText2 = Messages(FONT, 25, 'Press any key to continue', WHITE,
                               201, 225)
        self.gameOverText = Messages(FONT, 50, 'Game Over', WHITE, 250, 270)
        self.nextRoundText = Messages(FONT, 50, 'Next Round', WHITE, 240, 270)
        self.invader1Text = Messages(FONT, 25, '   =   10 pts', GREEN, 368, 270)
        self.invader2Text = Messages(FONT, 25, '   =  20 pts', BLUE, 368, 320)
        self.invader3Text = Messages(FONT, 25, '   =  30 pts', PURPLE, 368, 370)
        self.invader4Text = Messages(FONT, 25, '   =  ?????', RED, 368, 420)
        self.scoreText = Messages(FONT, 20, 'Score', WHITE, 5, 5)
        self.livesText = Messages(FONT, 20, 'Lives ', WHITE, 640, 5)

    @staticmethod
    def Exit(evt):
        return evt.type == QUIT or (evt.type == KEYUP and evt.key == K_ESCAPE)
# checking the keys pressed
    def checkButtonsPressed(self):
        self.keys = key.get_pressed()
        for e in event.get():
            if self.Exit(e):
                sys.exit()
            if e.type == KEYDOWN:
                if e.key == K_SPACE:
                    print('Fire')

    def createinvaders(self):
        invaders = InvadersTeam(10, 5)
        for row in range(5):
            for column in range(10):
                invader = Invader(row, column)
                invader.rect.x = 157 + (column * 50)
                invader.rect.y = self.invaderLocation + (row * 45)
                invaders.add(invader)

        self.invaders = invaders
        self.allSprites = sprite.Group(self.player, self.invaders,
                                       self.LifePackage)

# create the main menu showing the images of the invaders
    def Publish_Main(self):
        self.invader1 = PICS['invader1']
        self.invader1 = transform.scale(self.invader1, (40, 40))
        self.invader2 = PICS['invader2']
        self.invader2 = transform.scale(self.invader2, (40, 40))
        self.invader3 = PICS['invader3']
        self.invader3 = transform.scale(self.invader3, (40, 40))
        self.invader4 = PICS['BONUS']
        self.invader4 = transform.scale(self.invader4, (80, 40))
        self.window.blit(self.invader1, (318, 270))
        self.window.blit(self.invader2, (318, 320))
        self.window.blit(self.invader3, (318, 370))
        self.window.blit(self.invader4, (299, 420))

        for e in event.get():
            if self.Exit(e):
                sys.exit()
            if e.type == KEYUP:
                self.startGame = True
                self.mainScreen = False
# invaders' speed will increase as time increase to increase the difficlty
    def updating_Movement_Speed(self):
        for invader in self.invaders:
            invader.Time = 200+len(self.invaders)*10


    def create_new_ship(self, createShip, present):
        if createShip and (present - self.shipTimer > 900):
            self.player = Fighter()
            self.allSprites.add(self.player)
            self.playerGroup.add(self.player)
            self.makeNewShip = False
            self.shipAlive = True

    def create_game_over(self, present):
        sys.exit()

    def main(self):
        while True:
            if self.mainScreen:
                self.reset(0, 3, True)
                self.window.blit(self.background, (0, 0))
                self.titleText.draw(self.window)
                self.titleText2.draw(self.window)
                self.invader1Text.draw(self.window)
                self.invader2Text.draw(self.window)
                self.invader3Text.draw(self.window)
                self.invader4Text.draw(self.window)
                self.Publish_Main()

            elif self.startGame:
                if len(self.invaders) == 0:
                    present = time.get_ticks()
                    if present - self.gameTimer < 3000:
                        self.window.blit(self.background, (0, 0))
                        self.scoreText2 = Messages(FONT, 20, str(self.score),
                                               GREEN, 85, 5)
                        self.scoreText.draw(self.window)
                        self.scoreText2.draw(self.window)
                        self.nextRoundText.draw(self.window)
                        self.livesText.draw(self.window)
                        self.LifePackage.update(self.keys)
                        self.checkButtonsPressed()
                    if present - self.gameTimer > 3000:
                        # Move enemies closer to bottom
                        self.invaderStartLocation += 35
                        self.reset(self.score, self.lives)
                        self.gameTimer += 3000
                else:
                    present = time.get_ticks()
                    self.window.blit(self.background, (0, 0))
                    self.TotalDefenders.update(self.window)
                    self.scoreText2 = Messages(FONT, 20, str(self.score), GREEN,
                                           85, 5)
                    self.scoreText.draw(self.window)
                    self.scoreText2.draw(self.window)
                    self.livesText.draw(self.window)
                    self.checkButtonsPressed()
                    self.allSprites.update(self.keys, present,
                                           self.invaders)
                    self.updating_Movement_Speed()

            display.update()
            self.clock.tick(60)


if __name__ == '__main__':
    game = TheGame()
    game.main()


